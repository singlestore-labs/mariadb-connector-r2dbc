// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2020-2024 MariaDB Corporation Ab

package org.mariadb.r2dbc.integration;

import io.r2dbc.spi.ConnectionFactory;
import io.r2dbc.spi.test.TestKit;
import java.sql.SQLException;
import javax.sql.DataSource;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.Disabled;
import org.mariadb.jdbc.MariaDbDataSource;
import org.mariadb.r2dbc.MariadbConnectionConfiguration;
import org.mariadb.r2dbc.MariadbConnectionFactory;
import org.mariadb.r2dbc.TestConfiguration;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.JdbcTemplate;

public class MariadbTextTestKit implements TestKit<String> {
  private static final DataSource jdbcDatasource;

  static {
    String connString =
        String.format(
            "jdbc:mariadb://%s:%s/%s?user=%s&password=%s",
            TestConfiguration.host,
            TestConfiguration.port,
            TestConfiguration.database,
            TestConfiguration.username,
            TestConfiguration.password);
    try {
      jdbcDatasource = new MariaDbDataSource(connString);
    } catch (SQLException e) {
      throw new IllegalArgumentException(
          String.format("wrong initialization with %s", connString), e);
    }
  }

  @Override
  public ConnectionFactory getConnectionFactory() {
    // error crashing maxscale 6.1.x
    try (java.sql.Connection con = jdbcDatasource.getConnection()) {
      Assumptions.assumeTrue(
          !con.getMetaData().getDatabaseProductVersion().contains("maxScale-6.1.")
              && !"skysql-ha".equals(System.getenv("srv")));
    } catch (SQLException e) {
      // eat
    }

    try {
      MariadbConnectionConfiguration confMulti =
          TestConfiguration.defaultBuilder.clone().allowMultiQueries(true).build();
      return new MariadbConnectionFactory(confMulti);
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException("Unexpected error");
    }
  }

  @Override
  public String getPlaceholder(int i) {
    return ":v" + i;
  }

  @Override
  public String getIdentifier(int i) {
    return "v" + i;
  }

  @Override
  public JdbcOperations getJdbcOperations() {
    return new JdbcTemplate(MariadbTextTestKit.jdbcDatasource);
  }

  @Override
  public String doGetSql(TestStatement statement) {
    switch (statement) {
      case CREATE_TABLE_AUTOGENERATED_KEY:
        return TestStatement.CREATE_TABLE_AUTOGENERATED_KEY
            .getSql()
            .replaceAll("IDENTITY", "PRIMARY KEY AUTO_INCREMENT");
      case INSERT_VALUE_AUTOGENERATED_KEY:
      case INSERT_VALUE100:
        return "INSERT INTO test(test_value) VALUES (100)";
      case INSERT_VALUE200:
        return "INSERT INTO test(test_value) VALUES (200)";
      default:
        return statement.getSql();
    }
  }

  @Override
  public String clobType() {
    return "TEXT";
  }

  @Override
  @Disabled
  public void savePointStartsTransaction() {
  }

  @Override
  @Disabled
  public void savePoint() {
  }
}
